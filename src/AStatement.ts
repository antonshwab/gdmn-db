import {ABlob} from "./ABlob";
import {AResultSet} from "./AResultSet";
import {INamedParams} from "./ATransaction";
import {TExecutor} from "./types";

/**
 * An object that represents a precompiled SQL statement.
 * A SQL statement is precompiled and stored in a Statement object.
 * This object can then be used to efficiently execute this statement multiple times.
 */
export abstract class AStatement<B extends ABlob = ABlob,
    RS extends AResultSet<B> = AResultSet<B>> {

    public static async executeFromParent<R>(sourceCallback: TExecutor<null, AStatement>,
                                             resultCallback: TExecutor<AStatement, R>): Promise<R> {
        let statement: undefined | AStatement;
        try {
            statement = await sourceCallback(null);
            return await resultCallback(statement);
        } finally {
            if (statement) {
                await statement.dispose();
            }
        }
    }

    /**
     * Example:
     * <pre>
     * const result = await AStatement.executeResultSet(statement, async (resultSet) => {
     *      return await resultSet.getArrays();
     * })}
     * </pre>
     */
    public static async executeResultSet<R>(
        statement: AStatement,
        callback: TExecutor<AResultSet, R>
    ): Promise<R>;

    /**
     * Example:
     * <pre>
     * const result = await AStatement.executeResultSet(statement, [param1, param2], async (resultSet) => {
     *      return await resultSet.getArrays();
     * })}
     * </pre>
     */
    public static async executeResultSet<R>(
        statement: AStatement,
        params: any[] | INamedParams,
        callback?: TExecutor<AResultSet, R>
    ): Promise<R>;

    public static async executeResultSet<R>(
        statement: AStatement,
        params: any[] | INamedParams,
        callback?: TExecutor<AResultSet, R>
    ): Promise<R> {
        if (!callback) {
            callback = params as TExecutor<AResultSet, R>;
        }
        return await AResultSet.executeFromParent(() => statement.executeQuery(params), callback);
    }

    /**
     * Executes the SQL query in this Statement object and returns
     * the ResultSet object generated by the query.
     *
     * @param {any[] | INamedParams | null} params
     * array of parameters or object containing placeholders as keys and parameters as values; optional
     * @returns {Promise<RS extends AResultSet>}
     * a ResultSet object that contains the data produced by the given query;
     * never null
     */
    public abstract async executeQuery(params?: any[] | INamedParams): Promise<RS>;

    /**
     * Executes the SQL query in this Statement object.
     *
     * @param {any[] | INamedParams | null} params
     * array of parameters or object containing placeholders as keys and parameters as values; optional
     */
    public abstract async execute(params?: null | any[] | INamedParams): Promise<void>;

    /**  Releases this Statement object's database and resources */
    public abstract async dispose(): Promise<void>;
}
