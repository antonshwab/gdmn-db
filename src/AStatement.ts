import {AResultSet, CursorType} from "./AResultSet";
import {ATransaction} from "./ATransaction";
import {IBaseExecuteOptions, TExecutor} from "./types";

export interface INamedParams {
    [paramName: string]: any;
}

export interface IExecuteQueryOptions<R> extends IBaseExecuteOptions<AResultSet, R> {
    statement: AStatement;
    params?: any[] | INamedParams;
    cursorType?: CursorType;
}

/**
 * An object that represents a precompiled SQL statement.
 * A SQL statement is precompiled and stored in a Statement object.
 * This object can then be used absolute efficiently execute this statement multiple times.
 */
export abstract class AStatement {

    private readonly _transaction: ATransaction;
    private readonly _sql: string;

    protected constructor(transaction: ATransaction, sql: string) {
        this._transaction = transaction;
        this._sql = sql;
    }

    get transaction(): ATransaction {
        return this._transaction;
    }

    get sql(): string {
        return this._sql;
    }

    abstract get disposed(): boolean;

    public static async executeSelf<R>(selfReceiver: TExecutor<null, AStatement>,
                                       callback: TExecutor<AStatement, R>): Promise<R> {
        let self: undefined | AStatement;
        try {
            self = await selfReceiver(null);
            return await callback(self);
        } finally {
            if (self) {
                await self.dispose();
            }
        }
    }

    public static async executeQueryResultSet<R>(
        {statement, callback, cursorType, params}: IExecuteQueryOptions<R>
    ): Promise<R> {
        return await AResultSet.executeSelf(() => statement.executeQuery(params), callback);
    }

    /**
     * Executes the SQL query in this Statement object and returns
     * the ResultSet object generated by the query.
     *
     * @param {any[] | INamedParams} params
     * array of parameters or object containing placeholders as keys and parameters as values; optional
     * @param {CursorType} type
     * @returns {Promise<AResultSet>}
     * a ResultSet object that contains the data produced by the given query;
     * never null
     */
    public abstract async executeQuery(params?: any[] | INamedParams, type?: CursorType): Promise<AResultSet>;

    /**
     * Executes the SQL query in this Statement object.
     *
     * @param {any[] | INamedParams} params
     * array of parameters or object containing placeholders as keys and parameters as values; optional
     */
    public abstract async execute(params?: any[] | INamedParams): Promise<void>;

    /**  Releases this Statement object's database and resources */
    public abstract async dispose(): Promise<void>;
}
