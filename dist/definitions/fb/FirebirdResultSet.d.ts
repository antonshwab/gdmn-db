import { ResultSet as ApiResultSet } from "node-firebird-native-api";
import { AResultSet } from "../AResultSet";
import { FirebirdBlob } from "./FirebirdBlob";
import { FirebirdStatement } from "./FirebirdStatement";
export interface IResultSetSource {
    handler: ApiResultSet;
    outBuffer: Uint8Array;
}
export declare class FirebirdResultSet extends AResultSet<FirebirdBlob> {
    readonly parent: FirebirdStatement;
    disposeStatementOnClose: boolean;
    source?: IResultSetSource;
    private _buffers;
    private _currentIndex;
    private _finished;
    protected constructor(parent: FirebirdStatement, source: IResultSetSource);
    readonly position: number;
    static open(parent: FirebirdStatement, params: any[]): Promise<FirebirdResultSet>;
    private static _throwIfBlob(value);
    next(): Promise<boolean>;
    previous(): Promise<boolean>;
    to(i: number): Promise<boolean>;
    beforeFirst(): Promise<void>;
    afterLast(): Promise<void>;
    first(): Promise<boolean>;
    last(): Promise<boolean>;
    isBeforeFirst(): Promise<boolean>;
    isAfterLast(): Promise<boolean>;
    isFirst(): Promise<boolean>;
    isLast(): Promise<boolean>;
    isClosed(): Promise<boolean>;
    close(): Promise<void>;
    getBlob(i: number): FirebirdBlob;
    getBlob(name: string): FirebirdBlob;
    getBoolean(i: number): boolean;
    getBoolean(name: string): boolean;
    getDate(i: number): null | Date;
    getDate(name: string): null | Date;
    getNumber(i: number): number;
    getNumber(name: string): number;
    getString(i: number): string;
    getString(name: string): string;
    getAny(i: number): Promise<any>;
    getAny(name: string): Promise<any>;
    isNull(i: number): boolean;
    isNull(name: string): boolean;
    private _getValue(field);
    private getOutDescriptor(field);
    private _checkClosed();
}
