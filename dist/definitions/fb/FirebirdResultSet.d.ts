/// <reference types="node" />
import { Attachment, ResultSet, Transaction } from "node-firebird-driver-native";
import { AResultSet, IRow } from "../AResultSet";
export declare class FirebirdResultSet extends AResultSet {
    private readonly _connection;
    private readonly _transaction;
    private readonly _resultSet;
    private _data;
    private _currentIndex;
    private _status;
    constructor(connect: Attachment, transaction: Transaction, resultSet: ResultSet);
    readonly position: number;
    next(): Promise<boolean>;
    previous(): Promise<boolean>;
    to(i: number): Promise<boolean>;
    beforeFirst(): Promise<void>;
    afterLast(): Promise<void>;
    first(): Promise<boolean>;
    last(): Promise<boolean>;
    isBeforeFirst(): Promise<boolean>;
    isAfterLast(): Promise<boolean>;
    isFirst(): Promise<boolean>;
    isLast(): Promise<boolean>;
    isClosed(): Promise<boolean>;
    close(): Promise<void>;
    getBlobBuffer(i: number): Promise<null | Buffer>;
    getBlobBuffer(name: string): Promise<null | Buffer>;
    getBlobStream(i: number): Promise<null | NodeJS.ReadableStream>;
    getBlobStream(name: string): Promise<null | NodeJS.ReadableStream>;
    getBoolean(i: number): Promise<boolean>;
    getBoolean(name: string): Promise<boolean>;
    getDate(i: number): Promise<null | Date>;
    getDate(name: string): Promise<null | Date>;
    getNumber(i: number): Promise<number>;
    getNumber(name: string): Promise<number>;
    getString(i: number): Promise<string>;
    getString(name: string): Promise<string>;
    getAny(i: number): Promise<any>;
    getAny(name: string): Promise<any>;
    isNull(i: number): Promise<boolean>;
    isNull(name: string): Promise<boolean>;
    getObject(): Promise<IRow>;
    getArray(): Promise<any[]>;
    getObjects(): Promise<IRow[]>;
    getArrays(): Promise<any[][]>;
    private _getValue(field);
    private _checkClosed();
}
